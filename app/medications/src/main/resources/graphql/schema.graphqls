# Medications Service GraphQL Schema (Federated)
#
# This demonstrates building a federated GraphQL API with Spring Boot.
# Phase 6: Integrated with Apollo Federation Gateway
#
# Compare with:
# - Hasura (Phase 1): Database-first, auto-generated
# - Appointments (Phase 3/4): Code-first, Node.js/TypeScript

# IMPORTANT: Must match Hasura's scalar types for federation
scalar uuid

"""
A prescription for a member from a provider
"""
type Prescription @key(fields: "id") {
    id: ID!
    memberId: ID!
    providerId: ID!
    medicationName: String!
    dosage: String!
    frequency: String!
    startDate: String!
    endDate: String
    refillsRemaining: Int!
    pharmacy: String!
    status: PrescriptionStatus!
    notes: String
    createdAt: String!
    updatedAt: String!
    member: members
    provider: provider_records
}

"""
Member entity (extended from Hasura subgraph)
Use Hasura's exact type name and scalar type: members, uuid!
"""
type members @key(fields: "id") @extends {
    id: uuid! @external
}

"""
Provider entity (extended from Hasura/Providers subgraph)
Use Hasura's exact type name and scalar type: provider_records, uuid!
"""
type provider_records @key(fields: "id") @extends {
    id: uuid! @external
}

"""
Prescription status values
"""
enum PrescriptionStatus {
    ACTIVE
    EXPIRED
    CANCELLED
    COMPLETED
}

"""
Input for creating a new prescription
"""
input CreatePrescriptionInput {
    memberId: ID!
    providerId: ID!
    medicationName: String!
    dosage: String!
    frequency: String!
    startDate: String!
    endDate: String
    pharmacy: String!
    notes: String
}

"""
Input for updating prescription refills
"""
input RefillPrescriptionInput {
    prescriptionId: ID!
    additionalRefills: Int!
}

type Query {
    """
    Get all prescriptions
    """
    prescriptions: [Prescription!]!

    """
    Get a single prescription by ID
    """
    prescription(id: ID!): Prescription

    """
    Get prescriptions for a specific member
    """
    prescriptionsByMember(memberId: ID!): [Prescription!]!

    """
    Get prescriptions from a specific provider
    """
    prescriptionsByProvider(providerId: ID!): [Prescription!]!

    """
    Get prescriptions by status
    """
    prescriptionsByStatus(status: PrescriptionStatus!): [Prescription!]!
}

type Mutation {
    """
    Create a new prescription
    """
    createPrescription(input: CreatePrescriptionInput!): Prescription!

    """
    Cancel a prescription
    """
    cancelPrescription(id: ID!): Prescription!

    """
    Add refills to a prescription
    """
    refillPrescription(input: RefillPrescriptionInput!): Prescription!

    """
    Mark prescription as completed
    """
    completePrescription(id: ID!): Prescription!
}
