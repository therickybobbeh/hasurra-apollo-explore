#!/usr/bin/env tsx
/**
 * Hasura v2 ‚Üí DDN v3 Migration Helper
 *
 * This script helps automate parts of the migration from Hasura Cloud v2
 * to Hasura DDN v3 by:
 *
 * 1. Validating connection to source database
 * 2. Checking for DDN CLI installation
 * 3. Generating connector configuration
 * 4. Creating initial .hml metadata files
 * 5. Providing next steps for manual configuration
 *
 * Usage:
 *   npm run ddn:migrate
 */

import { execSync } from 'child_process';
import { existsSync, mkdirSync, writeFileSync } from 'fs';
import { join } from 'path';
import * as readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(prompt, (answer) => resolve(answer));
  });
}

async function main() {
  console.log('üöÄ Hasura v2 ‚Üí DDN v3 Migration Helper\n');

  // Step 1: Check DDN CLI
  console.log('üìã Step 1: Checking DDN CLI installation...');
  try {
    const version = execSync('ddn version', { encoding: 'utf-8' });
    console.log(`‚úÖ DDN CLI installed: ${version.trim()}`);
  } catch (error) {
    console.error('‚ùå DDN CLI not found!');
    console.log('\nüì• Install DDN CLI:');
    console.log('  macOS/Linux: curl -L https://graphql-engine-cdn.hasura.io/ddn/cli/latest/get.sh | bash');
    console.log('  Windows: irm https://graphql-engine-cdn.hasura.io/ddn/cli/latest/get.ps1 | iex');
    process.exit(1);
  }

  // Step 2: Get PostgreSQL connection string
  console.log('\nüìã Step 2: PostgreSQL Connection');
  const connString = await question(
    'Enter your PostgreSQL connection string\n(from Neon/Hasura Cloud Phase 1):\n'
  );

  if (!connString || !connString.startsWith('postgresql://')) {
    console.error('‚ùå Invalid connection string format');
    process.exit(1);
  }

  // Step 3: Test connection
  console.log('\nüìã Step 3: Testing database connection...');
  try {
    const pg = require('pg');
    const client = new pg.Client(connString);
    await client.connect();
    console.log('‚úÖ Database connection successful');

    // Get table list
    const result = await client.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      AND table_type = 'BASE TABLE'
    `);

    console.log(`\nüìä Found ${result.rows.length} tables:`);
    result.rows.forEach((row: any) => {
      console.log(`   - ${row.table_name}`);
    });

    await client.end();
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
    process.exit(1);
  }

  // Step 4: Create DDN directory structure
  console.log('\nüìã Step 4: Creating DDN directory structure...');

  const ddnDir = join(process.cwd(), 'ddn');
  const dirs = [
    join(ddnDir, 'connector', 'postgres'),
    join(ddnDir, 'metadata', 'models'),
    join(ddnDir, 'metadata', 'relationships'),
  ];

  dirs.forEach((dir) => {
    if (!existsSync(dir)) {
      mkdirSync(dir, { recursive: true });
      console.log(`‚úÖ Created ${dir}`);
    } else {
      console.log(`‚è≠Ô∏è  Exists: ${dir}`);
    }
  });

  // Step 5: Create .env file
  console.log('\nüìã Step 5: Creating .env file...');
  const envPath = join(ddnDir, '.env');
  const envContent = `# Hasura DDN Environment Configuration
# Generated by migrate-to-ddn.ts

# PostgreSQL Connection
POSTGRESQL_CONNECTION_STRING=${connString}

# Hasura DDN (get PAT from: ddn login)
HASURA_DDN_PAT=your-personal-access-token-here

# Apollo Federation (from Phase 2)
APOLLO_KEY=service:your-graph-name:your-apollo-key
APOLLO_GRAPH_REF=your-graph-name@current
`;

  writeFileSync(envPath, envContent);
  console.log(`‚úÖ Created ${envPath}`);
  console.log('   ‚ö†Ô∏è  Remember to add your HASURA_DDN_PAT after running: ddn login');

  // Step 6: Next steps
  console.log('\nüìã Step 6: Next Steps');
  console.log('\n‚ú® Migration preparation complete!');
  console.log('\nüéØ Next, run these commands:\n');
  console.log('1. Login to DDN:');
  console.log('   $ ddn login\n');
  console.log('2. Initialize DDN project:');
  console.log('   $ cd ddn && ddn project init\n');
  console.log('3. Introspect database and generate models:');
  console.log('   $ ddn connector introspect postgres --output metadata/models/\n');
  console.log('4. Add relationships:');
  console.log('   $ ddn connector introspect postgres --detect-relationships\n');
  console.log('5. Build supergraph locally (validate):');
  console.log('   $ ddn supergraph build local\n');
  console.log('6. Deploy to DDN cloud:');
  console.log('   $ ddn supergraph build create\n');
  console.log('üìñ Full guide: labs/phase-3-hasura-ddn/README.md\n');

  rl.close();
}

main().catch((error) => {
  console.error('‚ùå Migration helper failed:', error);
  process.exit(1);
});
